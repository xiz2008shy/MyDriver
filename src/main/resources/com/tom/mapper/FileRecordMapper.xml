<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tom.mapper.FileRecordMapper">

    <update id="createTableIfNotExists">
        CREATE TABLE if not exists `file_record_table`
        (
            `id`              bigint NOT NULL AUTO_INCREMENT,
            file_name         varchar(255)                                  not null,
            relative_location varchar(255)    default '/'                   not null,
            last_modified     datetime        default '1993-04-16 00:00:00' not null comment '本地文件的最后修改时间',
            md5               varchar(100)    default ''                    not null comment '文件md5',
            remote_path       varchar(255)    default ''                    not null comment 'oss文件路径',
            record_type       int             default 0                     not null comment '0-文件，1-目录',
            size              bigint unsigned default 0                     not null comment '文件大小',
            deleted           tinyint unsigned NOT NULL DEFAULT '0' COMMENT '是否删除，默认为0，1表示暂时删除',
            operate_time      datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '操作时间',
            PRIMARY KEY (`id`),
            KEY `file_record_table_file_name_IDX` (`file_name`) USING BTREE,
            KEY `file_record_table_relative_location_IDX` (`relative_location`) USING BTREE,
            KEY `file_record_table_md5_IDX` (`md5`) USING BTREE
        ) ENGINE = InnoDB
          AUTO_INCREMENT = 0
          DEFAULT CHARSET = utf8mb4;
    </update>

    <select id="selectListByRelativeLocation" resultType="FileRecord">
        select * from file_record_table
        <where>
            <if test="relativePath != null and relativePath !=''">
                relative_location = #{relativePath}
            </if>
            and deleted = 0
        </where>
    </select>

    <select id="selectByRlAndFn" resultType="FileRecord">
        select * from file_record_table
        <where>
            relative_location = #{relativePath}
            and file_name = #{filename}
            and deleted = 0
        </where>
    </select>

    <insert id="insert" parameterType="FileRecord">
        insert into file_record_table (file_name,
            <if test="relativeLocation != null and relativeLocation != ''">relative_location,</if>
                last_modified,
            <if test="md5 != null and md5 != ''">md5,</if>
            <if test="remotePath != null and remotePath != ''">remote_path,</if>
                record_type,size)
            values (
                    #{fileName},
            <if test="relativeLocation != null and relativeLocation != ''">#{relativeLocation},</if>
                    #{lastModified},
            <if test="md5 != null and md5 != ''">#{md5},</if>
            <if test="remotePath != null and remotePath != ''">#{remotePath},</if>
                    #{recordType},#{size}
            )
    </insert>

    <update id="updateById" parameterType="FileRecord">
        update file_record_table
        <set>
            file_name = #{fileName},
            relative_location = #{relativeLocation},
            md5 = #{md5},
            last_modified = #{lastModified},
            `size` = #{size}
        </set>
        where id = #{id}
    </update>

    <select id="selectListByMd5AndSize" resultType="FileRecord">
        select * from file_record_table
        <where>
            md5 = #{md5}
            and `size` = #{size}
        </where>
    </select>

    <update id="tempRemoveBatch" parameterType="FileRecord">
        update file_record_table set
            deleted = 1
        where id in
        <foreach collection="fileRecords" item="it" separator="," open="(" close=")">
            #{it.id}
        </foreach>
    </update>

    <update id="selectByFilenameAnd" parameterType="LocalFileRecord">
        update file_record_table set
        deleted = case
        <foreach collection="fileRecords" item="item">
            when file_name=#{item.fileName} and relative_location=#{item.relativeLocation}
            then 1
        </foreach>
        else 0 end
        where file_name in
        <foreach collection="fileRecords" item="it" separator="," open="(" close=")">
            #{it.fileName}
        </foreach>
    </update>

    <select id="selectListByRlAndFn" parameterType="LocalFileRecord" resultType="FileRecord">
        <foreach collection="fileRecords" item="item" separator="union all">
            select * from file_record_table
            <where>
                relative_location = #{item.relativeLocation}
                and file_name = #{item.fileName}
                and deleted = 0
            </where>
        </foreach>
    </select>
</mapper>